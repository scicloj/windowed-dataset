[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Windowed dataset",
    "section": "",
    "text": "Docs\nA Clojure library for efficient time-series analysis with fixed-memory streaming data processing.\nHere",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Windowed dataset",
    "section": "Overview",
    "text": "Overview\nWorking with streaming data often means dealing with two competing needs: analyzing recent trends while keeping memory usage under control. Windowed Dataset solves this by providing a circular buffer that maintains only the most recent N data points, automatically discarding older data as new data arrives.\nThink of it as a sliding window over your data stream - you always see the most recent activity while using constant memory, regardless of how much data flows through your system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#status",
    "href": "index.html#status",
    "title": "Windowed dataset",
    "section": "Status",
    "text": "Status\nAlpha stage - API may change",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#key-features",
    "href": "index.html#key-features",
    "title": "Windowed dataset",
    "section": "Key Features",
    "text": "Key Features\n\nFixed memory usage - Process unlimited streaming data with constant memory footprint\nTime-based windows - Extract data from specific time ranges (e.g., “last 5 minutes”)\nStreaming-friendly - Insert new data in constant time\nSeamless integration - Works naturally with Tablecloth/tech.ml.dataset\nZero-copy views - Extract time windows without data copying\n\n⚠️ Note: This library uses mutable data structures for performance. Use with appropriate care in concurrent environments.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Windowed dataset",
    "section": "Installation",
    "text": "Installation\nAdd to your deps.edn:\n{:deps {scicloj/windowed-dataset {:local/root \"path/to/windowed-dataset\"}}}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#quick-example",
    "href": "index.html#quick-example",
    "title": "Windowed dataset",
    "section": "Quick Example",
    "text": "Quick Example\n(require '[scicloj.windowed-dataset.api :as wd]\n         '[java-time.api :as java-time])\n\n;; Create a buffer for temperature sensor data (keep last 100 readings)\n(def sensor-buffer \n  (wd/make-windowed-dataset {:timestamp :instant \n                             :temperature :float64 \n                             :location :string} 100))\n\n;; Add streaming data\n(def updated-buffer \n  (wd/insert-to-windowed-dataset! \n    sensor-buffer \n    {:timestamp (java-time/instant)\n     :temperature 23.5\n     :location \"greenhouse-1\"}))\n\n;; Get all current data as a regular dataset\n(wd/windowed-dataset-&gt;dataset updated-buffer)\n\n;; Get only the last 5 minutes of data\n(wd/windowed-dataset-&gt;time-window-dataset updated-buffer :timestamp 300000)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#common-patterns",
    "href": "index.html#common-patterns",
    "title": "Windowed dataset",
    "section": "Common Patterns",
    "text": "Common Patterns\n\nStreaming Analytics\nCalculate metrics on recent data without storing the entire history:\n(defn current-average [windowed-ds]\n  (let [recent-data (wd/windowed-dataset-&gt;dataset windowed-ds)\n        temperatures (:temperature recent-data)]\n    (when (seq temperatures)\n      (/ (reduce + temperatures) (count temperatures)))))\n\n\nHistorical Analysis\nAdd progressive features to existing time-series data:\n(wd/add-column-by-windowed-fn \n  historical-data\n  {:colname :rolling-average\n   :windowed-fn current-average\n   :windowed-dataset-size 50})\n\n\nReal-time Processing\nProcess continuous data streams with bounded memory:\n;; Process sensor readings as they arrive\n(reduce wd/insert-to-windowed-dataset! \n        sensor-buffer \n        real-time-sensor-stream)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#when-to-use-this",
    "href": "index.html#when-to-use-this",
    "title": "Windowed dataset",
    "section": "When to Use This",
    "text": "When to Use This\nGreat for: - Real-time dashboards and monitoring - Streaming analytics and alerts\n- IoT sensor data processing - Financial tick data analysis - Online feature engineering for ML models\nNot ideal for: - Small datasets that fit in memory - Analyses requiring access to full historical data - Applications needing data persistence across restarts",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#performance",
    "href": "index.html#performance",
    "title": "Windowed dataset",
    "section": "Performance",
    "text": "Performance\n\nMemory: O(window-size) - constant regardless of total data processed\nInsertion: O(1) - constant time to add new data\nTime queries: O(log n) - efficient binary search for time ranges\nConversion: Zero-copy - views over existing data",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#dependencies",
    "href": "index.html#dependencies",
    "title": "Windowed dataset",
    "section": "Dependencies",
    "text": "Dependencies\n\nTablecloth - For dataset operations\njava-time - For time handling",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Windowed dataset",
    "section": "License",
    "text": "License\nCopyright © 2025 Scicloj\nDistributed under the Eclipse Public License version 1.0.\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Docs</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html",
    "href": "windowed_dataset_examples.html",
    "title": "Windowed Dataset Examples",
    "section": "",
    "text": "The Problem: Streaming Data with Limited Memory\nThis notebook shows how to use windowed datasets for streaming data analysis. We’ll work with temperature sensor data as a relatable example, but the same patterns apply to any time-series data.\nImagine you’re processing temperature readings from sensors. New readings arrive continuously, but you only care about recent trends and don’t want to store years of historical data in memory.\nWindowed datasets solve this by maintaining a “sliding window” of recent data.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#basic-setup",
    "href": "windowed_dataset_examples.html#basic-setup",
    "title": "Windowed Dataset Examples",
    "section": "Basic Setup",
    "text": "Basic Setup\nLet’s define our data structure: timestamp, temperature, and sensor location\n\n(def column-types\n  {:timestamp :instant\n   :temperature :float64\n   :location :string})\n\nCreate a windowed dataset that keeps only the last 5 readings\n\n(def temperature-buffer\n  (wd/make-windowed-dataset column-types 5))\n\nInitial state - empty buffer:\n\ntemperature-buffer\n\n{\n\n\n\n\n\n\n\n\n:dataset\n\n\n\n_unnamed [5 3]:\n\n\n\n:timestamp\n:temperature\n:location\n\n\n\n\n\n0.0\n\n\n\n\n0.0\n\n\n\n\n0.0\n\n\n\n\n0.0\n\n\n\n\n0.0\n\n\n\n\n\n\n\n\n\n:column-types {:timestamp :instant, :temperature :float64, :location :string}:max-size 5:current-size 0:current-position 0}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#simulating-streaming-data",
    "href": "windowed_dataset_examples.html#simulating-streaming-data",
    "title": "Windowed Dataset Examples",
    "section": "Simulating Streaming Data",
    "text": "Simulating Streaming Data\nCreate sample temperature readings (like data from a greenhouse monitoring system)\n\n(def sample-readings\n  (let [start-time (java-time/instant)]\n    (map (fn [i]\n           {:timestamp (java-time/plus start-time (java-time/seconds (* i 30)))\n            :temperature (+ 22.0 (* 2.0 (Math/sin (/ i 3.0)))) ; Simulated daily variation\n            :location \"greenhouse-a\"})\n         (range 10))))\n\nSample data - first 5 readings:\n\n(tc/dataset (take 5 sample-readings))\n\n\n_unnamed [5 3]:\n\n\n\n:timestamp\n:temperature\n:location\n\n\n\n\n2025-08-07T22:59:14.995218Z\n22.00000000\ngreenhouse-a\n\n\n2025-08-07T22:59:44.995218Z\n22.65438939\ngreenhouse-a\n\n\n2025-08-07T23:00:14.995218Z\n23.23673961\ngreenhouse-a\n\n\n2025-08-07T23:00:44.995218Z\n23.68294197\ngreenhouse-a\n\n\n2025-08-07T23:01:14.995218Z\n23.94387580\ngreenhouse-a",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#watching-the-window-in-action",
    "href": "windowed_dataset_examples.html#watching-the-window-in-action",
    "title": "Windowed Dataset Examples",
    "section": "Watching the Window in Action",
    "text": "Watching the Window in Action\nLet’s insert data one by one and watch how the window behaves\n\n(defn show-window-evolution []\n  (let [results (atom [])]\n    (reduce (fn [buffer reading]\n              (let [updated-buffer (wd/insert-to-windowed-dataset! buffer reading)\n                    current-data (wd/windowed-dataset-&gt;dataset updated-buffer)]\n                (swap! results conj\n                       {:reading-number (count @results)\n                        :buffer-size (:current-size updated-buffer)\n                        :temperatures (vec (:temperature current-data))})\n                updated-buffer))\n            temperature-buffer\n            (take 8 sample-readings))\n    @results))\n\nWindow evolution as data arrives:\n\n(tc/dataset (show-window-evolution))\n\n\n_unnamed [8 3]:\n\n\n\n\n\n\n\n\n:reading-number\n:buffer-size\n:temperatures\n\n\n\n\n0\n1\n[22.0]\n\n\n1\n2\n[22.0 22.654389393592304]\n\n\n2\n3\n[22.0 22.654389393592304 23.236739606139473]\n\n\n3\n4\n[22.0 22.654389393592304 23.236739606139473 23.682941969615793]\n\n\n4\n5\n[22.0\n\n\n\n\n22.654389393592304\n\n\n\n\n23.236739606139473\n\n\n\n\n23.682941969615793\n\n\n\n\n23.943875802726627]\n\n\n5\n5\n[22.654389393592304\n\n\n\n\n23.236739606139473\n\n\n\n\n23.682941969615793\n\n\n\n\n23.943875802726627\n\n\n\n\n23.99081591550353]\n\n\n6\n5\n[23.236739606139473\n\n\n\n\n23.682941969615793\n\n\n\n\n23.943875802726627\n\n\n\n\n23.99081591550353\n\n\n\n\n23.818594853651362]\n\n\n7\n5\n[23.682941969615793\n\n\n\n\n23.943875802726627\n\n\n\n\n23.99081591550353\n\n\n\n\n23.818594853651362\n\n\n\n\n23.44617176347665]\n\n\n\n\nNotice how: - The buffer grows until it reaches maximum size (5) - After that, old data is automatically discarded to make room for new data - Memory usage stays constant regardless of how much data we process",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#time-based-windows",
    "href": "windowed_dataset_examples.html#time-based-windows",
    "title": "Windowed Dataset Examples",
    "section": "Time-Based Windows",
    "text": "Time-Based Windows\nOften you don’t just want the last N readings - you want “all data from the last X minutes”\nFill our buffer with all sample data\n\n(def full-buffer\n  (reduce wd/insert-to-windowed-dataset! temperature-buffer sample-readings))\n\nAll data in buffer:\n\n(wd/windowed-dataset-&gt;dataset full-buffer)\n\n\n_unnamed [5 3]:\n\n\n\n:timestamp\n:temperature\n:location\n\n\n\n\n2025-08-07T23:01:44.995218155Z\n23.99081592\ngreenhouse-a\n\n\n2025-08-07T23:02:14.995218155Z\n23.81859485\ngreenhouse-a\n\n\n2025-08-07T23:02:44.995218155Z\n23.44617176\ngreenhouse-a\n\n\n2025-08-07T23:03:14.995218155Z\n22.91454525\ngreenhouse-a\n\n\n2025-08-07T23:03:44.995218155Z\n22.28224002\ngreenhouse-a\n\n\n\n\nExtract different time windows\n\n(let [now (:timestamp (last sample-readings))]\n  {:last-90-seconds (wd/windowed-dataset-&gt;time-window-dataset full-buffer :timestamp 90000)\n   :last-150-seconds (wd/windowed-dataset-&gt;time-window-dataset full-buffer :timestamp 150000)\n   :reference-time now})\n\n{\n\n\n\n\n\n\n\n\n:last-90-seconds\n\n\n\n_unnamed [4 3]:\n\n\n\n:timestamp\n:temperature\n:location\n\n\n\n\n2025-08-07T23:02:14.995218155Z\n23.81859485\ngreenhouse-a\n\n\n2025-08-07T23:02:44.995218155Z\n23.44617176\ngreenhouse-a\n\n\n2025-08-07T23:03:14.995218155Z\n22.91454525\ngreenhouse-a\n\n\n2025-08-07T23:03:44.995218155Z\n22.28224002\ngreenhouse-a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:last-150-seconds\n\n\n\n_unnamed [5 3]:\n\n\n\n:timestamp\n:temperature\n:location\n\n\n\n\n2025-08-07T23:01:44.995218155Z\n23.99081592\ngreenhouse-a\n\n\n2025-08-07T23:02:14.995218155Z\n23.81859485\ngreenhouse-a\n\n\n2025-08-07T23:02:44.995218155Z\n23.44617176\ngreenhouse-a\n\n\n2025-08-07T23:03:14.995218155Z\n22.91454525\ngreenhouse-a\n\n\n2025-08-07T23:03:44.995218155Z\n22.28224002\ngreenhouse-a\n\n\n\n\n\n\n\n\n:reference-time #inst \"2025-08-07T23:03:44.995218155-00:00\"}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#real-world-pattern-streaming-analytics",
    "href": "windowed_dataset_examples.html#real-world-pattern-streaming-analytics",
    "title": "Windowed Dataset Examples",
    "section": "Real-World Pattern: Streaming Analytics",
    "text": "Real-World Pattern: Streaming Analytics\nHere’s how you might calculate a running average temperature in a real application\n\n(defn calculate-average-temperature [buffer]\n  \"Calculate current average temperature from buffer\"\n  (let [current-data (wd/windowed-dataset-&gt;dataset buffer)\n        temperatures (:temperature current-data)]\n    (when (seq temperatures)\n      (dfn/mean temperatures))))\n\nSimulate processing readings as they arrive, calculating moving averages\n\n(defn streaming-analytics-demo []\n  (let [results (atom [])]\n    (reduce (fn [buffer reading]\n              (let [updated-buffer (wd/insert-to-windowed-dataset! buffer reading)\n                    avg-temp (calculate-average-temperature updated-buffer)]\n                (swap! results conj\n                       {:timestamp (:timestamp reading)\n                        :current-temperature (:temperature reading)\n                        :running-average avg-temp\n                        :readings-in-buffer (:current-size updated-buffer)})\n                updated-buffer))\n            temperature-buffer\n            sample-readings)\n    @results))\n\nStreaming analytics results:\n\n(tc/dataset (streaming-analytics-demo))\n\n\n_unnamed [10 4]:\n\n\n\n\n\n\n\n\n\n:timestamp\n:current-temperature\n:running-average\n:readings-in-buffer\n\n\n\n\n2025-08-07T22:59:14.995218Z\n22.00000000\n22.00000000\n1\n\n\n2025-08-07T22:59:44.995218Z\n22.65438939\n22.32719470\n2\n\n\n2025-08-07T23:00:14.995218Z\n23.23673961\n22.63037633\n3\n\n\n2025-08-07T23:00:44.995218Z\n23.68294197\n22.89351774\n4\n\n\n2025-08-07T23:01:14.995218Z\n23.94387580\n23.10358935\n5\n\n\n2025-08-07T23:01:44.995218Z\n23.99081592\n23.50175254\n5\n\n\n2025-08-07T23:02:14.995218Z\n23.81859485\n23.73459363\n5\n\n\n2025-08-07T23:02:44.995218Z\n23.44617176\n23.77648006\n5\n\n\n2025-08-07T23:03:14.995218Z\n22.91454525\n23.62280072\n5\n\n\n2025-08-07T23:03:44.995218Z\n22.28224002\n23.29047356\n5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#historical-analysis-adding-progressive-features",
    "href": "windowed_dataset_examples.html#historical-analysis-adding-progressive-features",
    "title": "Windowed Dataset Examples",
    "section": "Historical Analysis: Adding Progressive Features",
    "text": "Historical Analysis: Adding Progressive Features\nSometimes you have historical data and want to see how metrics would have evolved over time, as if you were processing it in real-time.\n\n(def historical-temperatures\n  (tc/dataset {:timestamp (map #(java-time/plus (java-time/instant)\n                                                (java-time/seconds %))\n                               (range 12))\n               :temperature (map #(+ 20.0 (* 3.0 (Math/sin (/ % 2.0))))\n                                 (range 12))}))\n\nOriginal historical data:\n\nhistorical-temperatures\n\n\n_unnamed [12 2]:\n\n\n\n:timestamp\n:temperature\n\n\n\n\n2025-08-07T22:59:15.029262Z\n20.00000000\n\n\n2025-08-07T22:59:16.029312Z\n21.43827662\n\n\n2025-08-07T22:59:17.029317Z\n22.52441295\n\n\n2025-08-07T22:59:18.029319Z\n22.99248496\n\n\n2025-08-07T22:59:19.029321Z\n22.72789228\n\n\n2025-08-07T22:59:20.029323Z\n21.79541643\n\n\n2025-08-07T22:59:21.029325Z\n20.42336002\n\n\n2025-08-07T22:59:22.029327Z\n18.94765032\n\n\n2025-08-07T22:59:23.029328Z\n17.72959251\n\n\n2025-08-07T22:59:24.029330Z\n17.06740965\n\n\n2025-08-07T22:59:25.029332Z\n17.12322718\n\n\n2025-08-07T22:59:26.029335Z\n17.88337902\n\n\n\n\nAdd a progressive moving average column\n\n(def with-moving-average\n  (wd/add-column-by-windowed-fn\n   historical-temperatures\n   {:colname :progressive-average\n    :windowed-fn calculate-average-temperature\n    :windowed-dataset-size 120}))\n\nHistorical data with progressive moving averages:\n\nwith-moving-average\n\n\n_unnamed [12 3]:\n\n\n\n:timestamp\n:temperature\n:progressive-average\n\n\n\n\n2025-08-07T22:59:15.029262Z\n20.00000000\n\n\n\n2025-08-07T22:59:16.029312Z\n21.43827662\n20.00000000\n\n\n2025-08-07T22:59:17.029317Z\n22.52441295\n20.71913831\n\n\n2025-08-07T22:59:18.029319Z\n22.99248496\n21.32089652\n\n\n2025-08-07T22:59:19.029321Z\n22.72789228\n21.73879363\n\n\n2025-08-07T22:59:20.029323Z\n21.79541643\n21.93661336\n\n\n2025-08-07T22:59:21.029325Z\n20.42336002\n21.91308054\n\n\n2025-08-07T22:59:22.029327Z\n18.94765032\n21.70026332\n\n\n2025-08-07T22:59:23.029328Z\n17.72959251\n21.35618670\n\n\n2025-08-07T22:59:24.029330Z\n17.06740965\n20.95323179\n\n\n2025-08-07T22:59:25.029332Z\n17.12322718\n20.56464957\n\n\n2025-08-07T22:59:26.029335Z\n17.88337902\n20.25179299\n\n\n\n\nNotice how the moving average starts as nil (no data), then becomes the first value, then a true average as more data accumulates.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#memory-efficiency-demo",
    "href": "windowed_dataset_examples.html#memory-efficiency-demo",
    "title": "Windowed Dataset Examples",
    "section": "Memory Efficiency Demo",
    "text": "Memory Efficiency Demo\nLet’s prove that windowed datasets use constant memory regardless of input size\n\n(defn memory-efficiency-test []\n  (let [;; Create lots of data\n        lots-of-data (map (fn [i]\n                            {:timestamp (java-time/plus (java-time/instant)\n                                                        (java-time/millis i))\n                             :temperature (+ 20.0 (rand 10.0))\n                             :location \"test-sensor\"})\n                          (range 1000))\n\n        ;; Create two buffers of different sizes\n        small-buffer (wd/make-windowed-dataset column-types 10)\n        large-buffer (wd/make-windowed-dataset column-types 100)]\n\n    ;; Process all data through both buffers\n    (let [final-small (reduce wd/insert-to-windowed-dataset! small-buffer lots-of-data)\n          final-large (reduce wd/insert-to-windowed-dataset! large-buffer lots-of-data)]\n\n      {:input-data-size (count lots-of-data)\n       :small-buffer-final-size (:current-size final-small)\n       :large-buffer-final-size (:current-size final-large)\n       :memory-usage \"Constant - only depends on buffer size, not input size!\"})))\n\nMemory efficiency test:\n\n(memory-efficiency-test)\n\n\n{:input-data-size 1000,\n :small-buffer-final-size 10,\n :large-buffer-final-size 100,\n :memory-usage\n \"Constant - only depends on buffer size, not input size!\"}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#practical-applications",
    "href": "windowed_dataset_examples.html#practical-applications",
    "title": "Windowed Dataset Examples",
    "section": "Practical Applications",
    "text": "Practical Applications\nWindowed datasets are perfect for:\n\nReal-time monitoring - Track recent system metrics, sensor readings, or user activity\nStreaming alerts - Detect anomalies based on recent patterns without storing everything\nLive dashboards - Show current trends and recent history with bounded memory\nIoT data processing - Handle continuous sensor streams efficiently\nFinancial analysis - Calculate technical indicators on streaming market data\nML feature engineering - Create time-based features for online learning models\n\nKey Benefits:\n\nPredictable memory usage - Never grows beyond your specified window size\nEfficient time queries - Binary search makes time-based filtering fast\nStreaming-friendly - Designed for continuous data processing\nSeamless integration - Works naturally with existing Clojure data tools",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset_examples.html#summary",
    "href": "windowed_dataset_examples.html#summary",
    "title": "Windowed Dataset Examples",
    "section": "Summary",
    "text": "Summary\nWindowed datasets provide a simple but powerful abstraction for handling streaming time-series data. By maintaining only recent data, you can build efficient real-time analytics systems that don’t consume unbounded memory.\nThe key insight is that many analyses only need recent context, not complete history. Windowed datasets make this pattern explicit and efficient.\n\nsource: notebooks/windowed_dataset_examples.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Windowed Dataset Examples</span>"
    ]
  },
  {
    "objectID": "windowed_dataset.api_reference.html",
    "href": "windowed_dataset.api_reference.html",
    "title": "API Reference",
    "section": "",
    "text": "WindowedDataset Record\nThe WindowedDataset record implements a circular buffer data structure optimized for time-series analysis:\nKey characteristics:\nTypical workflow:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>API Reference</span>"
    ]
  },
  {
    "objectID": "windowed_dataset.api_reference.html#windoweddataset-record",
    "href": "windowed_dataset.api_reference.html#windoweddataset-record",
    "title": "API Reference",
    "section": "",
    "text": "(defrecord WindowedDataset\n          [dataset           ; tech.v3.dataset containing the actual data\n           column-types      ; map of column names to data types\n           max-size         ; maximum number of rows the buffer can hold\n           current-size     ; current number of rows (0 to max-size)\n           current-position ; current write position (circular index)])\n\n\nMutable - Designed for performance in streaming scenarios\nFixed memory - Pre-allocates space for predictable memory usage\nCircular buffer - Automatically overwrites oldest data when full\nChronological access - Data is always returned in insertion order\nZero-copy views - Time windows are extracted without copying data\n\n\n\nCreate with make-windowed-dataset specifying column types and buffer size\nInsert streaming data with insert-to-windowed-dataset!\nExtract time windows with windowed-dataset-&gt;time-window-dataset\nCompute metrics over specific time periods\n\n\nWindowedDataset Structure Example\n\n(let [;; Create a windowed dataset to examine its structure\n      windowed-ds (wd/make-windowed-dataset {:timestamp :instant :value :float64} 3)\n      base-time (java-time/instant)\n\n      ;; Add one data point to see the structure\n      wd-with-data (wd/insert-to-windowed-dataset! windowed-ds {:timestamp base-time :value 42.5})]\n\n  ;; **WindowedDataset Record Fields:**\n  {:dataset \"tech.v3.dataset (Internal data storage)\"\n   :column-types (:column-types wd-with-data)\n   :max-size (:max-size wd-with-data)\n   :current-size (:current-size wd-with-data)\n   :current-position (:current-position wd-with-data)})\n\n\n{:dataset \"tech.v3.dataset (Internal data storage)\",\n :column-types {:timestamp :instant, :value :float64},\n :max-size 3,\n :current-size 1,\n :current-position 1}\n\n\n\nCircular Buffer Behavior\n\n(let [;; Demonstrate circular buffer behavior\n      small-wd (wd/make-windowed-dataset {:value :int32} 3)\n\n      ;; Fill beyond capacity to show circular behavior\n      test-data (map (fn [i] {:value i}) (range 5))\n      final-wd (reduce wd/insert-to-windowed-dataset! small-wd test-data)]\n\n  ;; **Circular Buffer Example (capacity: 3, inserted: 5 values):**\n  ;; Final state: size=3, position=2 (values 0,1 were overwritten by 3,4)\n  ;; **Data in chronological order:**\n  (wd/windowed-dataset-&gt;dataset final-wd))\n\n\n_unnamed [3 1]:\n\n\n\n:value\n\n\n\n\n2\n\n\n3\n\n\n4\n\n\n\n\n\n\nmake-windowed-dataset\n[column-types max-size]\nCreate an empty WindowedDataset with a given max-size and given column-types (map).\nArgs:\n\ncolumn-types - a map from column name to type\nmax-size - maximal window size to keep\n\nReturns: The specified WindowedDataset structure.\n\nExample\n\n(let [;; Create a windowed dataset for sensor data with 10-sample capacity\n      column-spec {:timestamp :instant\n                   :temperature :float64\n                   :sensor-id :string}\n      windowed-ds (wd/make-windowed-dataset column-spec 10)]\n\n  ;; **Created windowed dataset:**\n  {:max-size (:max-size windowed-ds)\n   :current-size (:current-size windowed-ds)\n   :current-position (:current-position windowed-ds)\n   :column-types (:column-types windowed-ds)})\n\n\n{:max-size 10,\n :current-size 0,\n :current-position 0,\n :column-types\n {:timestamp :instant, :temperature :float64, :sensor-id :string}}\n\n\n\n\ninsert-to-windowed-dataset!\n[{:as windowed-dataset, :keys [dataset column-types max-size current-position]} value]\nInsert a new row to a WindowedDataset.\nArgs:\n\nwindowed-dataset - a WindowedDataset\nrow - A row represented as a map structure (can be a record or FastStruct, etc.)\n\nReturns: Updated windowed dataset with its data mutated(!).\n\nExample\n\n(let [;; Create windowed dataset\n      windowed-ds (wd/make-windowed-dataset {:timestamp :instant :temperature :float64 :sensor-id :string} 5)\n      base-time (java-time/instant)\n\n      ;; Insert some data points\n      sample-data [{:timestamp base-time :temperature 22.5 :sensor-id \"temp-001\"}\n                   {:timestamp (java-time/plus base-time (java-time/seconds 30)) :temperature 23.1 :sensor-id \"temp-001\"}\n                   {:timestamp (java-time/plus base-time (java-time/seconds 60)) :temperature 22.8 :sensor-id \"temp-001\"}]\n\n      ;; Insert data step by step\n      wd-step1 (wd/insert-to-windowed-dataset! windowed-ds (first sample-data))\n      wd-step2 (wd/insert-to-windowed-dataset! wd-step1 (second sample-data))\n      final-wd (wd/insert-to-windowed-dataset! wd-step2 (last sample-data))]\n\n  ;; **Windowed dataset after inserting 3 records:**\n  ;; Current size: 3\n  ;; **Data view:**\n  (wd/windowed-dataset-&gt;dataset final-wd))\n\n\n_unnamed [3 3]:\n\n\n\n:timestamp\n:temperature\n:sensor-id\n\n\n\n\n2025-08-07T22:59:15.306466407Z\n22.5\ntemp-001\n\n\n2025-08-07T22:59:45.306466407Z\n23.1\ntemp-001\n\n\n2025-08-07T23:00:15.306466407Z\n22.8\ntemp-001\n\n\n\n\n\n\n\nwindowed-dataset-indices\n[{:keys [max-size current-size current-position]}]\nExtract the row indices for retrieving data from a windowed dataset in insertion order.\nThis utility function encapsulates the logic for determining which rows to select from the underlying dataset to present data in the correct chronological order.\nArgs:\n\nwindowed-dataset - a WindowedDataset\n\nReturns: Vector of integer indices in the correct order for data retrieval\n\nExample\n\n(let [;; Create and populate a small windowed dataset\n      windowed-ds (wd/make-windowed-dataset {:value :int32} 4)\n      ;; Insert 6 items (will wrap around)\n      final-wd (reduce wd/insert-to-windowed-dataset! windowed-ds\n                       (map (fn [i] {:value i}) (range 6)))]\n\n  ;; **Windowed dataset with circular buffer behavior:**\n  ;; Dataset state: size=4, position=2, max=4\n  ;; **Index order for chronological access:**\n  {:indices (wd/windowed-dataset-indices final-wd)\n   ;; **Data in insertion order:**\n   :data (wd/windowed-dataset-&gt;dataset final-wd)})\n\n{:indices [2 3 0 1]\n\n\n\n\n\n\n\n\n:data\n\n\n\n_unnamed [4 1]:\n\n\n\n:value\n\n\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n\n\n\n\n\n\n}\n\n\n\nwindowed-dataset-&gt;dataset\n[{:as windowed-dataset, :keys [dataset]}]\nReturn a regular dataset as a view over the content of a windowed dataset.\nArgs:\n\nwindowed-dataset - a WindowedDataset\n\n\nExample\n\n(let [;; Create windowed dataset with sample sensor data\n      base-time (java-time/instant)\n      sensor-readings (map (fn [i reading]\n                             {:timestamp (java-time/plus base-time (java-time/seconds (* i 30)))\n                              :temperature reading\n                              :reading-id i})\n                           (range 8)\n                           [22.1 22.5 22.8 23.2 22.9 23.1 22.7 22.4])\n      windowed-ds (wd/make-windowed-dataset {:timestamp :instant :temperature :float64 :reading-id :int32} 5)\n      final-wd (reduce wd/insert-to-windowed-dataset! windowed-ds sensor-readings)]\n\n  ;; **Converting windowed dataset to regular dataset:**\n  ;; Inserted 8 temperature readings into 5-capacity window (last 5 retained):\n  (wd/windowed-dataset-&gt;dataset final-wd))\n\n\n_unnamed [5 3]:\n\n\n\n:timestamp\n:temperature\n:reading-id\n\n\n\n\n2025-08-07T23:00:45.314059998Z\n23.2\n3\n\n\n2025-08-07T23:01:15.314059998Z\n22.9\n4\n\n\n2025-08-07T23:01:45.314059998Z\n23.1\n5\n\n\n2025-08-07T23:02:15.314059998Z\n22.7\n6\n\n\n2025-08-07T23:02:45.314059998Z\n22.4\n7\n\n\n\n\n\n\n\nbinary-search-timestamp-start\n[timestamp-col indices target-time]\nBinary search to find the first index where timestamp &gt;= target-time.\nArgs:\n\ntimestamp-col - the timestamp column from the dataset\nindices - vector of indices in chronological order\ntarget-time - the target timestamp to search for\n\nReturns: Index in the indices vector where the search should start\n\nExample\n\n(let [;; Create sample timestamp data\n      base-time (java-time/instant)\n      timestamps (map #(java-time/plus base-time (java-time/seconds (* % 60))) (range 5))\n      timestamp-col (vec timestamps)\n      indices (vec (range 5))\n\n      ;; Search for different target times\n      search-cases [[(java-time/plus base-time (java-time/seconds 90)) \"Between timestamps\"]\n                    [(java-time/plus base-time (java-time/seconds 120)) \"Exact match\"]\n                    [(java-time/minus base-time (java-time/seconds 30)) \"Before all timestamps\"]\n                    [(java-time/plus base-time (java-time/seconds 300)) \"After all timestamps\"]]]\n\n  ;; **Binary search examples:**\n  ;; Timestamps: [formatted times]\n  (map (fn [[target-time description]]\n         {:target-time (str target-time)\n          :description description\n          :found-position (wd/binary-search-timestamp-start timestamp-col indices target-time)})\n       search-cases))\n\n\n({:target-time \"2025-08-07T23:00:45.317992333Z\",\n  :description \"Between timestamps\",\n  :found-position 2}\n {:target-time \"2025-08-07T23:01:15.317992333Z\",\n  :description \"Exact match\",\n  :found-position 2}\n {:target-time \"2025-08-07T22:58:45.317992333Z\",\n  :description \"Before all timestamps\",\n  :found-position 0}\n {:target-time \"2025-08-07T23:04:15.317992333Z\",\n  :description \"After all timestamps\",\n  :found-position 5})\n\n\n\n\nwindowed-dataset-&gt;time-window-dataset\n[{:as windowed-dataset, :keys [dataset]} timestamp-colname time-window]\nReturn a regular dataset as a view over the content of a windowed dataset, including only a recent time window. Uses binary search for optimal performance.\nArgs:\n\nwindowed-dataset - a WindowedDataset\ntimestamp-colname - the name of the column that contains timestamps\ntime-window - window length in ms (from most recent timestamp backwards)\n\nReturns: Dataset containing only data within the specified time window\nPerformance: O(log n) time complexity using binary search\n\nExample\n\n(let [;; Create realistic sensor scenario with timestamps\n      base-time (java-time/instant)\n      readings [22.1 22.3 21.9 22.5 22.2 22.7 22.0 22.4 22.1 21.8 22.2 22.0 22.6 22.1 22.5]\n\n      ;; Create timestamped data (measurements every 30 seconds)\n      sensor-data (map-indexed (fn [i reading]\n                                 {:timestamp (java-time/plus base-time (java-time/seconds (* i 30)))\n                                  :temperature reading\n                                  :reading-id i})\n                               readings)\n\n      windowed-ds (wd/make-windowed-dataset {:timestamp :instant :temperature :float64 :reading-id :int32} 20)\n      final-wd (reduce wd/insert-to-windowed-dataset! windowed-ds sensor-data)]\n\n  ;; **Time window extraction examples:**\n  ;; Created 15 temperature readings over ~7.5 minutes\n\n  ;; **Last 2 minutes of data:**\n  {:last-2-minutes (wd/windowed-dataset-&gt;time-window-dataset final-wd :timestamp 120000)\n\n   ;; **Last 5 minutes of data:**\n   :last-5-minutes (wd/windowed-dataset-&gt;time-window-dataset final-wd :timestamp 300000)\n\n   ;; **All data (10-minute window):**\n   :all-data (-&gt; (wd/windowed-dataset-&gt;time-window-dataset final-wd :timestamp 600000)\n                 (tc/select-columns [:reading-id :temperature]))})\n\n{\n\n\n\n\n\n\n\n\n:last-2-minutes\n\n\n\n_unnamed [5 3]:\n\n\n\n:timestamp\n:temperature\n:reading-id\n\n\n\n\n2025-08-07T23:04:15.331444170Z\n22.2\n10\n\n\n2025-08-07T23:04:45.331444170Z\n22.0\n11\n\n\n2025-08-07T23:05:15.331444170Z\n22.6\n12\n\n\n2025-08-07T23:05:45.331444170Z\n22.1\n13\n\n\n2025-08-07T23:06:15.331444170Z\n22.5\n14\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:last-5-minutes\n\n\n\n_unnamed [11 3]:\n\n\n\n:timestamp\n:temperature\n:reading-id\n\n\n\n\n2025-08-07T23:01:15.331444170Z\n22.2\n4\n\n\n2025-08-07T23:01:45.331444170Z\n22.7\n5\n\n\n2025-08-07T23:02:15.331444170Z\n22.0\n6\n\n\n2025-08-07T23:02:45.331444170Z\n22.4\n7\n\n\n2025-08-07T23:03:15.331444170Z\n22.1\n8\n\n\n2025-08-07T23:03:45.331444170Z\n21.8\n9\n\n\n2025-08-07T23:04:15.331444170Z\n22.2\n10\n\n\n2025-08-07T23:04:45.331444170Z\n22.0\n11\n\n\n2025-08-07T23:05:15.331444170Z\n22.6\n12\n\n\n2025-08-07T23:05:45.331444170Z\n22.1\n13\n\n\n2025-08-07T23:06:15.331444170Z\n22.5\n14\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:all-data\n\n\n\n_unnamed [15 2]:\n\n\n\n:reading-id\n:temperature\n\n\n\n\n0\n22.1\n\n\n1\n22.3\n\n\n2\n21.9\n\n\n3\n22.5\n\n\n4\n22.2\n\n\n5\n22.7\n\n\n6\n22.0\n\n\n7\n22.4\n\n\n8\n22.1\n\n\n9\n21.8\n\n\n10\n22.2\n\n\n11\n22.0\n\n\n12\n22.6\n\n\n13\n22.1\n\n\n14\n22.5\n\n\n\n\n\n\n\n\n}\n\n\n\ncopy-windowed-dataset\n[{:as windowed-dataset, :keys [dataset column-types max-size current-size current-position]}]\nCreate a deep copy of a windowed dataset.\nArgs:\n\nwindowed-dataset - a WindowedDataset\n\nReturns: New WindowedDataset with copied data\n\nExample\n\n(let [;; Create and populate a windowed dataset\n      base-time (java-time/instant)\n      original-data [{:timestamp base-time :temperature 22.5}\n                     {:timestamp (java-time/plus base-time (java-time/seconds 30)) :temperature 23.1}\n                     {:timestamp (java-time/plus base-time (java-time/seconds 60)) :temperature 22.8}]\n\n      windowed-ds (wd/make-windowed-dataset {:timestamp :instant :temperature :float64} 5)\n      populated-wd (reduce wd/insert-to-windowed-dataset! windowed-ds original-data)\n\n      ;; Create a deep copy\n      copied-wd (wd/copy-windowed-dataset populated-wd)]\n\n  ;; **Deep copy windowed dataset example:**\n  {:original-state {:size (:current-size populated-wd)\n                    :position (:current-position populated-wd)}\n   :copied-state {:size (:current-size copied-wd)\n                  :position (:current-position copied-wd)}\n   :data-identical (= (tc/rows (wd/windowed-dataset-&gt;dataset populated-wd))\n                      (tc/rows (wd/windowed-dataset-&gt;dataset copied-wd)))})\n\n\n{:original-state {:size 3, :position 3},\n :copied-state {:size 3, :position 3},\n :data-identical true}\n\n\n\n\nadd-column-by-windowed-fn\n[time-series {:keys [colname windowed-fn windowed-dataset-size]}]\nAdd a new column to a time-series by applying a windowed function progressively.\nThis function simulates real-time streaming analysis on historical time-series data. For each row in the time-series (processed in timestamp order), it:\n\nInserts the row into a growing windowed dataset\nApplies the windowed function to calculate a result\n\nUses that result as the column value for that row\n\nThis bridges the gap between streaming windowed analysis and batch processing of existing time-series data, allowing you to see how metrics evolve over time as if the data were being processed in real-time.\nArgs:\n\ntime-series - a tablecloth dataset with timestamp-ordered data\noptions - map with keys:\n\n:colname - name of the new column to add\n:windowed-fn - function that takes a WindowedDataset and returns a value\n:windowed-dataset-size - size of the windowed dataset buffer (currently ignored, uses 120)\n\n\nReturns: The original time-series with the new column added, where each row contains the result of applying the windowed function to all data up to that timestamp\nUse Cases: - Adding progressive metrics to time-series - Creating trend analysis columns that consider historical context - Simulating real-time algorithm behavior on historical data - Generating training data with progressive features for ML models\n\nExamples\n\n(let [time-series (tc/dataset {:timestamp [(java-time/instant)\n                                           (java-time/plus (java-time/instant) (java-time/seconds 30))\n                                           (java-time/plus (java-time/instant) (java-time/seconds 60))\n                                           (java-time/plus (java-time/instant) (java-time/seconds 90))]\n                               :value [10.0 20.0 15.0 25.0]})\n\n      ;; Define a simple moving average function\n      moving-avg-fn (fn [windowed-ds]\n                      (let [regular-ds (wd/windowed-dataset-&gt;dataset windowed-ds)\n                            values (:value regular-ds)]\n                        (when (seq values)\n                          (/ (reduce + values) (count values)))))\n\n      result (wd/add-column-by-windowed-fn time-series\n                                           {:colname :moving-avg\n                                            :windowed-fn moving-avg-fn\n                                            :windowed-dataset-size 10})]\n  (tc/select-columns result [:timestamp :value :moving-avg]))\n\n\n_unnamed [4 3]:\n\n\n\n:timestamp\n:value\n:moving-avg\n\n\n\n\n2025-08-07T22:59:15.347768Z\n10.0\n\n\n\n2025-08-07T22:59:45.347771Z\n20.0\n10.0\n\n\n2025-08-07T23:00:15.347783Z\n15.0\n15.0\n\n\n2025-08-07T23:00:45.347785Z\n25.0\n15.0",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>API Reference</span>"
    ]
  },
  {
    "objectID": "windowed_dataset.api_reference.html#smoothing-functions",
    "href": "windowed_dataset.api_reference.html#smoothing-functions",
    "title": "API Reference",
    "section": "Smoothing Functions",
    "text": "Smoothing Functions\n\nmoving-average\n[windowed-dataset window-size value-colname]\nCalculate simple moving average of recent data in windowed dataset.\nArgs:\n\nwindowed-dataset - a WindowedDataset\nwindow-size - number of recent samples to average\nvalue-colname - column name containing values to be processed\n\nReturns: Moving average of the most recent window-size samples, or nil if insufficient data\n\nExample\n\n(let [wd (wd/make-windowed-dataset {:x :int32} 10)\n      data [{:x 800} {:x 850} {:x 820}]\n      populated-wd (reduce wd/insert-to-windowed-dataset! wd data)]\n  (wd/moving-average populated-wd 3 :x))\n\n\n2470/3\n\n\n\n\nmedian-filter\n[windowed-dataset window-size value-colname]\nApply median filter to the most recent data in a windowed dataset.\nArgs:\n\nwindowed-dataset - a WindowedDataset\nwindow-size - number of recent samples to use for median calculation\nvalue-colname - column name containing values to be processed\n\nReturns: Median value of the most recent window-size samples, or nil if insufficient data\n\nExample\n\n(let [wd (wd/make-windowed-dataset {:x :int32} 10)\n      data [{:x 800} {:x 1200} {:x 820}] ; middle value is outlier\n      populated-wd (reduce wd/insert-to-windowed-dataset! wd data)]\n  (wd/median-filter populated-wd 3 :x))\n\n\n820\n\n\n\n\ncascaded-median-filter\n[windowed-dataset value-colname]\nApply cascaded median filters (3-point then 5-point) for robust smoothing.\nArgs:\n\nwindowed-dataset - a WindowedDataset\nvalue-colname - column name containing values to be processed\n\nReturns: Cascaded median filtered value, or nil if insufficient data (needs 5+ samples)\n\nExample\n\n(let [wd (wd/make-windowed-dataset {:x :int32} 10)\n      data [{:x 800} {:x 1200} {:x 820} {:x 1100} {:x 810}]\n      populated-wd (reduce wd/insert-to-windowed-dataset! wd data)]\n  (wd/cascaded-median-filter populated-wd :x))\n\n\n820\n\n\n\n\nexponential-moving-average\n[windowed-dataset alpha value-colname]\nCalculate exponential moving average of recent data in windowed dataset.\nArgs:\n\nwindowed-dataset - a WindowedDataset\nalpha - smoothing factor (0 &lt; alpha &lt;= 1, higher = more responsive)\nvalue-colname - column name containing values to be processed\n\nReturns: EMA value, or nil if no data available\n\nExample\n\n(let [wd (wd/make-windowed-dataset {:x :int32} 10)\n      data [{:x 800} {:x 850} {:x 820}]\n      populated-wd (reduce wd/insert-to-windowed-dataset! wd data)]\n  (wd/exponential-moving-average populated-wd 0.3 :x))\n\n\n816.5\n\n\n\n\ncascaded-smoothing-filter\n[windowed-dataset median-window ma-window value-colname]\nApply cascaded smoothing: median filter followed by moving average.\nThis combines the outlier-removal power of median filtering with the noise-reduction benefits of moving averages for comprehensive cleaning.\nArgs:\n\nwindowed-dataset - a WindowedDataset\nmedian-window - window size for median filter\nma-window - window size for moving average\nvalue-colname - column name containing values to be processed\n\nReturns: Final smoothed value, or nil if insufficient data\n\nExample\n\n(let [wd (wd/make-windowed-dataset {:x :int32} 15)\n      ;; Data with noise and outliers\n      data [{:x 800} {:x 820} {:x 1500} {:x 810}\n            {:x 805} {:x 815} {:x 2000} {:x 812}\n            {:x 808} {:x 795}]\n      populated-wd (reduce wd/insert-to-windowed-dataset! wd data)]\n\n  ;; Compare cascaded smoothing with individual methods\n  {:median-only (wd/median-filter populated-wd 5 :x)\n   :moving-avg-only (wd/moving-average populated-wd 5 :x)\n   :cascaded-5-3 (wd/cascaded-smoothing-filter populated-wd 5 3 :x)})\n\n\n{:median-only 812, :moving-avg-only 1046, :cascaded-5-3 805.0}\n\n\nsource: notebooks/api_reference.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>API Reference</span>"
    ]
  }
]